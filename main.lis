1     0000              MODULE cpm_crt0_asm
2     0000              LINE 0, "/home/ed/dev/3rdparty/z88dk/lib/config/../..//lib/target/cpm/classic/cpm_crt0.asm"
0     0000              
1     0000              ;
2     0000              ;       Startup for CP/M
3     0000              ;
4     0000              ;       Stefano Bodrato - Apr. 2000
5     0000              ;                         Apr. 2001: Added MS-DOS protection
6     0000              ;
7     0000              ;	Dominic Morris  - Jan. 2001: Added argc/argv support
8     0000              ;			- Jan. 2001: Added in malloc routines
9     0000              ;			- Jan. 2001: File support added
10    0000              ;
11    0000              ;       $Id: cpm_crt0.asm,v 1.43 2016-10-31 16:16:33 stefano Exp $
12    0000              ;
13    0000              ; 	There are a couple of #pragma commands which affect
14    0000              ;	this file:
15    0000              ;
16    0000              ;	#pragma output noprotectmsdos - strip the MS-DOS protection header
17    0000              ;	#pragma output protect8080 - add a check to block the program when on an 8080 CPU (not compatible)
18    0000              ;
19    0000              
20    0000                  MODULE  cpm_crt0
21    0000              
22    0000                  defc    crt0 = 1
23    0000                  INCLUDE "zcc_opt.def"
1     0000              
2     0000              IF !DEFINED_USING_amalloc
3     0000              	defc	DEFINED_USING_amalloc = 1
4     0000              	defc USING_amalloc = 0
5     0000              	IFNDEF USING_amalloc
6     0000              	ENDIF
7     0000              ENDIF
8     0000              
9     0000              
10    0000              IF !DEFINED_CRT_printf_format
11    0000              	defc	DEFINED_CRT_printf_format = 1
12    0000              	defc CRT_printf_format = 0x00000201
13    0000              ELSE
14    0000              	UNDEFINE temp_printf_format
15    0000              	defc temp_printf_format = CRT_printf_format
16    0000              	UNDEFINE CRT_printf_format
17    0000              	defc CRT_printf_format = temp_printf_format | 0x00000201
18    0000              ENDIF
19    0000              
20    0000              
21    0000              IF !NEED_printf
22    0000              	DEFINE	NEED_printf
23    0000              ENDIF
24    0000              
25    0000              
24    0000              
25    0000              
26    0000              
27    0000                  EXTERN	cpm_platform_init
28    0000                  EXTERN    _main		;main() is always external to crt0
29    0000              
30    0000                  PUBLIC    cleanup		;jp'd to by exit()
31    0000                  PUBLIC    l_dcal		;jp(hl)
32    0000              
33    0000                  defc    TAR__clib_exit_stack_size = 32
34    0000                  defc    TAR__register_sp = -1
35    0000                  defc	__CPU_CLOCK = 4000000
36    0000              
37    0000                  IF !DEFINED_CRT_ORG_CODE
38    0000                      defc    CRT_ORG_CODE  = $100
39    0000                  ENDIF
40    0000              
41    0000                  IF !DEFINED_CLIB_OPEN_MAX
42    0000                      defc    DEFINED_CLIB_OPEN_MAX = 1
43    0000                      defc    CLIB_OPEN_MAX = 3
44    0000                  ENDIF
45    0000              
46    0000                  ; Default to some "sensible" values
47    0000                  IF !DEFINED_CONSOLE_ROWS
48    0000                      defc    CONSOLE_ROWS = 24
49    0000                  ENDIF
50    0000                  IF !DEFINED_CONSOLE_COLUMNS
51    0000                      defc    CONSOLE_COLUMNS = 80
52    0000                  ENDIF
53    0000              
54    0000                  INCLUDE "crt/classic/crt_rules.inc"
1     0000              
2     0000              ; Rules for setting up defaults for configuring the build
3     0000              
4     0000              
5     0000                 IFNDEF CRT_INITIALIZE_BSS
6     0000                    defc CRT_INITIALIZE_BSS = 1
7     0000                 ENDIF
8     0000              
9     0000                 IFDEF REGISTER_SP
10    0000                    defc __register_sp = REGISTER_SP
11    0000                 ELSE
12    0000                    IFDEF STACKPTR
13    0000                       defc __register_sp = STACKPTR
14    0000                    ELSE
15    0000                       IFDEF TAR__register_sp
16    0000                          defc __register_sp = TAR__register_sp
17    0000                       ELSE
18    0000                          defc __register_sp = DEF__register_sp
19    0000                       ENDIF
20    0000                    ENDIF
21    0000                 ENDIF
22    0000              
23    0000                 IFNDEF TAR__crt_enable_rst
24    0000                     defc TAR__crt_enable_rst = 0x0000
25    0000                 ENDIF
26    0000              
27    0000                 IFDEF CRT_ENABLE_RST
28    0000                    defc __crt_enable_rst = CRT_ENABLE_RST | TAR__crt_enable_rst
29    0000                 ELSE
30    0000                    defc __crt_enable_rst = TAR__crt_enable_rst
31    0000                 ENDIF
32    0000              
33    0000                 IFDEF CRT_ENABLE_NMI
34    0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
35    0000                 ELSE
36    0000                   IFNDEF TAR__crt_enable_nmi
37    0000                      defc TAR__crt_enable_nmi = 0
38    0000                   ENDIF
39    0000                   defc __crt_enable_nmi = TAR__crt_enable_nmi
40    0000                 ENDIF
41    0000              
42    0000                 ; By default we want to have stdio working for us
43    0000                 IFNDEF CRT_ENABLE_STDIO
44    0000                     defc CRT_ENABLE_STDIO = 1
45    0000                 ENDIF
46    0000              
47    0000                 IFDEF CLIB_EXIT_STACK_SIZE
48    0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
49    0000                 ELSE
50    0000                    IFDEF TAR__clib_exit_stack_size
51    0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
52    0000                    ELSE
53    0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
54    0000                    ENDIF
55    0000                 ENDIF
56    0000              
57    0000                 ; For each bank call we save 2 words on the temporary stack
58    0000                 ; this controls the depth of calls we can make safely
59    0000                 IFNDEF CLIB_BANKING_STACK_SIZE
60    0000                    PUBLIC CLIB_BANKING_STACK_SIZE
61    0000                    IFDEF TAR__clib_banking_stack_size
62    0000                       defc CLIB_BANKING_STACK_SIZE = TAR__clib_banking_stack_size
63    0000                    ELSE
64    0000                       defc CLIB_BANKING_STACK_SIZE = 100
65    0000                    ENDIF
66    0000                 ENDIF
67    0000              
68    0000              
69    0000                 PUBLIC __CRT_KEY_DEL
70    0000                 IFDEF CRT_KEY_DEL
71    0000                   defc __CRT_KEY_DEL = CRT_KEY_DEL
72    0000                 ELSE
73    0000                   defc __CRT_KEY_DEL = 8
74    0000                 ENDIF
75    0000              
76    0000                 PUBLIC __CRT_KEY_CAPS_LOCK
77    0000                 IFDEF CRT_KEY_CAPS_LOCK
78    0000                   defc __CRT_KEY_CAPS_LOCK  = CRT_KEY_CAPS_LOCK
79    0000                 ELSE
80    0000                   defc __CRT_KEY_CAPS_LOCK = 6
81    0000                 ENDIF
82    0000              
83    0000                 PUBLIC __CPU_CLOCK
84    0000                 IFNDEF __CPU_CLOCK
85    0000                   defc __CPU_CLOCK = 3500000
86    0000                 ENDIF
87    0000              
88    0000                 PUBLIC __CLIB_CONIO_NATIVE_COLOUR
89    0000                 IFDEF CLIB_CONIO_NATIVE_COLOUR
90    0000                   defc __CLIB_CONIO_NATIVE_COLOUR = CLIB_CONIO_NATIVE_COLOUR
91    0000                 ELSE
92    0000                   defc __CLIB_CONIO_NATIVE_COLOUR = 0
93    0000                 ENDIF
94    0000              
95    0000                 ; When using the firmware printer we may need to disable the soft
96    0000                 ; cursor created by fgets_cons()
97    0000                 PUBLIC __CLIB_DISABLE_FGETS_CURSOR
98    0000                 IFDEF CLIB_DISABLE_FGETS_CURSOR
99    0000                   defc __CLIB_DISABLE_FGETS_CURSOR = CLIB_DISABLE_FGETS_CURSOR
100   0000                 ELSE
101   0000                   defc __CLIB_DISABLE_FGETS_CURSOR = 0
102   0000                 ENDIF
103   0000              
104   0000                 ; Delay when entering fgetc_cons()
105   0000                 ; 50ms stops rogue repeats nicely, but may need tuning
106   0000                 PUBLIC __CLIB_FGETC_CONS_DELAY
107   0000                 IFDEF CLIB_FGETC_CONS_DELAY
108   0000                   defc __CLIB_FGETC_CONS_DELAY = CLIB_FGETC_CONS_DELAY
109   0000                 ELSE
110   0000                   defc __CLIB_FGETC_CONS_DELAY = 50
111   0000                 ENDIF
112   0000              
113   0000                 ; Delay when kbhit/getch() returns a cached key press
114   0000                 ; Delaying slightly means that typing is possible
115   0000                 PUBLIC __CLIB_KBHIT_DELAY
116   0000                 IFDEF CLIB_KBHIT_DELAY
117   0000                   defc __CLIB_KBHIT_DELAY = CLIB_KBHIT_DELAY
118   0000                 ELSE
119   0000                   defc __CLIB_KBHIT_DELAY = 0
120   0000                 ENDIF
121   0000              
122   0000                 ; Some ports (looking at you tiki100) need to have graphics routines stored out
123   0000                 ; of paging harm. Normally we'd just use code_driver and keep the routines close
124   0000                 ; the start of the address space. However for tiki100, we need them at the end,
125   0000                 ; (in this case > 32768)
126   0000                 IF DEFINED_CRT_ORG_GRAPHICS
127   0000                     defc __crt_org_graphics = CRT_ORG_GRAPHICS
128   0000                 ENDIF
129   0000              
130   0000                 ; If 32 bit floats are defined, then we need to indicate to the library
131   0000                 ; that they are in use (mainly for printf/scanf)
132   0000                 PUBLIC CLIB_32BIT_FLOATS
133   0000                 IF !DEFINED_CLIB_32BIT_FLOATS
134   0000                     defc CLIB_32BIT_FLOATS = 0
135   0000                 ENDIF
136   0000                 PUBLIC CLIB_64BIT_FLOATS
137   0000                 IF !DEFINED_CLIB_64BIT_FLOATS
138   0000                     defc CLIB_64BIT_FLOATS = 0
139   0000                 ENDIF
140   0000              
141   0000                 ; Some targets startup in different screen modes depending on the environment:
142   0000                 ; eg native = 40columns, CP/M = 80 columns. These should be explicitly defined
143   0000                 ; if needed. So default to an unused value if not
144   0000                 PUBLIC CLIB_DEFAULT_SCREEN_MODE
145   0000                 IFNDEF CLIB_DEFAULT_SCREEN_MODE
146   0000                     defc CLIB_DEFAULT_SCREEN_MODE = 0
147   0000                 ENDIF
148   0000              
149   0000                  ; Maximum number of FILEs available
150   0000                  IF !DEFINED_CLIB_FOPEN_MAX
151   0000                      DEFC    CLIB_FOPEN_MAX = 10
152   0000                  ENDIF
153   0000                  PUBLIC  __FOPEN_MAX
154   0000                  defc    __FOPEN_MAX = CLIB_FOPEN_MAX
155   0000              
156   0000                  ; Maximum number of fds available
157   0000                  IF !DEFINED_CLIB_OPEN_MAX
158   0000                      ; Map this old nofileio pragma into a modern form
159   0000                      IF DEFINED_nofileio
160   0000                          defc    CLIB_OPEN_MAX = 0
161   0000                      ELSE
162   0000                          defc    CLIB_OPEN_MAX = CLIB_FOPEN_MAX
163   0000                      ENDIF
164   0000                  ENDIF
165   0000                  PUBLIC  __CLIB_OPEN_MAX
166   0000                  defc    __CLIB_OPEN_MAX = CLIB_OPEN_MAX
167   0000              
168   0000                 ; By default allow the command line options if available on the target/subtype
169   0000                 IF !DEFINED_CRT_ENABLE_COMMANDLINE
170   0000                    IFDEF TAR__CRT_ENABLE_COMMANDLINE
171   0000                        defc CRT_ENABLE_COMMANDLINE = TAR__CRT_ENABLE_COMMANDLINE
172   0000                    ELSE
173   0000                        defc CRT_ENABLE_COMMANDLINE = 1
174   0000                    ENDIF
175   0000                 ENDIF
176   0000              
177   0000              
178   0000                 ; Map this old pragma into a "modern" name
179   0000                 IF DEFINED_nostreams
180   0000                     defc CRT_COMMANDLINE_REDIRECTION = 0
181   0000                 ELIF !DEFINED_CRT_COMMANDLINE_REDIRECTION
182   0000                     ; File redirection on command line arguments can only happen
183   0000                     ; if stdio is enabled
184   0000                     IF CRT_ENABLE_STDIO = 1
185   0000                         defc CRT_COMMANDLINE_REDIRECTION = 1
186   0000                     ELSE
187   0000                         defc CRT_COMMANDLINE_REDIRECTION = 0
188   0000                     ENDIF
189   0000                 ENDIF
190   0000              
191   0000                 ; Block size for the gendos library
192   0000                 IF !DEFINED_CLIB_RND_BLOCKSIZE
193   0000                    DEFC    CLIB_RND_BLOCKSIZE = 1000
194   0000                 ENDIF
195   0000                 PUBLIC  __RND_BLOCKSIZE
196   0000                 defc    __RND_BLOCKSIZE = CLIB_RND_BLOCKSIZE
197   0000              
198   0000                 ; Define the height of the font
199   0000                 IF !DEFINED_CLIB_FONT_HEIGHT
200   0000                    defc CLIB_FONT_HEIGHT = 8
201   0000                 ENDIF
202   0000                 PUBLIC __CLIB_FONT_HEIGHT
203   0000                 defc __CLIB_FONT_HEIGHT = CLIB_FONT_HEIGHT
204   0000              
205   0000                 ; Custom memory map
206   0000                 IF DEFINED_MMAP
207   0000                     defc __MMAP = MMAP
208   0000                 ELSE
209   0000                     defc __MMAP = 0
210   0000                 ENDIF
211   0000              
55    0000              
56    0000                  org     CRT_ORG_CODE
57    0000              
58    0000              
59    0000              ;----------------------
60    0000              ; Execution starts here
61    0000              ;----------------------
62    0000              start:
63    0000              IF !DEFINED_noprotectmsdos
64    0000  EB 04       	defb	$eb,$04		;DOS protection... JMPS LABE
65    0002  EB          	ex	de,hl
66    0003  C3 34 01    	jp	begin-start+$100
67    0006  B4 09       	defb	$b4,$09		;DOS protection... MOV AH,9
68    0008  BA          	defb	$ba
69    0009  0F 00       	defw	dosmessage	;DOS protection... MOV DX,OFFSET dosmessage
70    000B  CD 21       	defb	$cd,$21		;DOS protection... INT 21h.
71    000D  CD 20       	defb	$cd,$20		;DOS protection... INT 20h.
72    000F              
73    000F              dosmessage:
74    000F  54 68 69 73 20 70 72 6F 67 72 61 6D 20 69 73 20 66 6F 72 20 61 20 43 50 2F 4D 20 73 79 73 74 65 
      002F  6D 2E 
                        	defm	"This program is for a CP/M system."
75    0031  0D 0A 24    	defb	13,10,'$'
76    0034              
77    0034              begin:
78    0034              ENDIF
79    0034              
80    0034              IF DEFINED_protect8080
81    0034              
82    0034              	ld	a,$7F			; 01111111 into accumulator
83    0034              	inc	a			; make it overflow ie. 10000000
84    0034              	jp	pe,isz80	; only 8080 resets for odd parity here
85    0034              
86    0034              	ld	c,9		; print string
87    0034              	ld	de,err8080
88    0034              	call	5	; BDOS
89    0034              	jp	0
90    0034              
91    0034              err8080:
92    0034              	defm	"This program requires a Z80 CPU."
93    0034              	defb	13,10,'$'
94    0034              isz80:
95    0034              ENDIF
96    0034              
97    0034  00          	nop	 ;   Those extra bytes fix the Amstrad NC's ZCN support !!?!
98    0035  00          	nop
99    0036              
100   0036  21 00 00        ld      hl,0
101   0039  39              add     hl,sp
102   003A  22 2F 01        ld      (start1+1),hl	;Save entry stack
103   003D              IF (startup=3)
104   003D                  ; Increase to cover +3 MEM banking
105   003D                  defc    __clib_exit_stack_size_t  = __clib_exit_stack_size + 18 + 18
106   003D                  UNDEFINE __clib_exit_stack_size
107   003D                  defc    __clib_exit_stack_size = __clib_exit_stack_size_t
108   003D              ENDIF
109   003D                  INCLUDE "crt/classic/crt_init_sp.asm"
1     003D              IF __register_sp < -1
2     003D              
3     003D                 IF __CPU_INTEL__
4     003D                   ld hl,(-__register_sp)      ; stack location is stored at memory address
5     003D                   ld sp,hl
6     003D                 ELSE
7     003D                   ld sp,(-__register_sp)      ; stack location is stored at memory address
8     003D                 ENDIF
9     003D              
10    003D              ELSE
11    003D              
12    003D                 IF __register_sp != -1
13    003D              
14    003D                    ld sp,__register_sp      ; stack is at fixed address
15    003D              
16    003D                 ENDIF
17    003D              
18    003D              ENDIF
19    003D              
20    003D              
110   003D                  INCLUDE "crt/classic/crt_init_atexit.asm"
1     003D              
2     003D                  PUBLIC  __clib_exit_stack_size
3     003D              
4     003D              IF __clib_exit_stack_size > 0
5     003D  21 C0 FF        ld      hl, -(__clib_exit_stack_size * 2)
6     0040  39              add     hl,sp
7     0041  F9              ld      sp,hl
8     0042              ENDIF
9     0042              
10    0042              
111   0042  CD 00 00        call    crt0_init_bss
112   0045  CD 00 00        call    cpm_platform_init	;Any platform specific init
113   0048  21 00 00        ld      hl,0
114   004B  39              add     hl,sp
115   004C  22 66 00        ld      (exitsp),hl
116   004F              
117   004F              ; Memory banking for Spectrum +3
118   004F              IF (startup=3)
119   004F              	PUBLIC    p3_poke
120   004F              	PUBLIC    p3_peek
121   004F              
122   004F              	push hl
123   004F              	ld de,64
124   004F              	add hl,de
125   004F              	ld (p3_poke+1),hl
126   004F              	push hl
127   004F              	ld de,18
128   004F              	add hl,de
129   004F              	ld (p3_peek+1),hl
130   004F              	pop hl
131   004F              	ld d,h
132   004F              	ld e,l
133   004F              	ld hl,pokebyte_code
134   004F              	ld bc,18+18
135   004F              	ldir
136   004F              	pop hl
137   004F              ENDIF
138   004F              
139   004F              ; Optional definition for auto MALLOC init
140   004F              ; it assumes we have free space between the end of
141   004F              ; the compiled program and the stack pointer
142   004F              IF DEFINED_USING_amalloc
143   004F                  INCLUDE "crt/classic/crt_init_amalloc.asm"
1     004F              
2     004F              ; Optional definition for auto MALLOC init
3     004F              ; it assumes we have free space between the end of
4     004F              ; the compiled program and the stack pointer
5     004F              
6     004F              ; It works only with a _heap pointer defined somewhere else in the crt0.
7     004F              ; Such (long) pointer will hold, at startup, the (word) value of ASMTAIL
8     004F              ; that points to the last used byte in the compiled program:
9     004F              
10    004F              ;IF DEFINED_USING_amalloc
11    004F              ;EXTERN ASMTAIL
12    004F              ;PUBLIC _heap
13    004F              ;._heap
14    004F              ;   defw ASMTAIL    ; Location of the last program byte
15    004F              ;   defw 0
16    004F              ;ENDIF
17    004F              
18    004F              
19    004F              ; $Id: amalloc.def,v 1.4 2016-07-14 17:44:17 pauloscustodio Exp $
20    004F              
21    004F              IF CRT_MAX_HEAP_ADDRESS
22    004F                  ld      hl,CRT_MAX_HEAP_ADDRESS
23    004F              ELSE
24    004F  21 00 00 39     ld      hl,sp
25    0053              ENDIF
26    0053                  ; HL must hold SP or the end of free memory
27    0053  E5              push    hl
28    0054              
29    0054  21 69 00        ld      hl,_heap
30    0057  4E              ld      c,(hl)
31    0058  23              inc     hl
32    0059  46              ld      b,(hl)
33    005A  03              inc     bc
34    005B                  ; compact way to do "mallinit()"
35    005B  AF              xor     a
36    005C  77              ld      (hl),a
37    005D  2B              dec     hl
38    005E  77              ld      (hl),a
39    005F              
40    005F  E1              pop     hl      ; sp
41    0060              
42    0060              IF __CPU_8085__
43    0060                  sub     hl,bc   ; hl = total free memory
44    0060              ELIF __CPU_8080__ || __CPU_GBZ80
45    0060                  ld      a,l
46    0060                  sub     c
47    0060                  ld      l,a
48    0060                  ld      a,h
49    0060                  sbc     b
50    0060                  ld      h,a
51    0060              ELSE
52    0060  ED 42           sbc     hl,bc   ; hl = total free memory
53    0062              ENDIF
54    0062              
55    0062  54 5D           ld      de,hl
56    0064              
57    0064              IF __CPU_8085__
58    0064                  sra     hl
59    0064                  sra     hl
60    0064                  ld      a,$3F
61    0064                  and     h
62    0064                  ld      h,a
63    0064                  ex      de,hl
64    0064              ELIF __CPU_8080__ || __CPU_GBZ80
65    0064                  and     a
66    0064                  ld      a,d
67    0064                  rra
68    0064                  ld      d,a
69    0064                  ld      a,e
70    0064                  rra
71    0064                  ld      e,a
72    0064                  and     a
73    0064                  ld      a,d
74    0064                  rra
75    0064                  ld      d,a
76    0064                  ld      a,e
77    0064                  rra
78    0064                  ld      e,a
79    0064              ELSE
80    0064  CB 3A           srl     d
81    0066  CB 1B           rr      e
82    0068  CB 3A           srl     d
83    006A  CB 1B           rr      e
84    006C              ENDIF
85    006C              
86    006C              IF __CPU_INTEL__ || __CPU_GBZ80__
87    006C              
88    006C              IF DEFINED_USING_amalloc_2
89    006C                  ld      a,l     ;  leave 2/4 of the free memory for the stack
90    006C                  sub     e
91    006C                  ld      l,a
92    006C                  ld      a,h
93    006C                  sbc     d
94    006C                  ld      h,a
95    006C              IF DEFINED_USING_amalloc_1
96    006C                  ld      a,l     ;  leave 3/4 of the free memory for the stack
97    006C                  sub     e
98    006C                  ld      l,a
99    006C                  ld      a,h
100   006C                  sbc     d
101   006C                  ld      h,a
102   006C              ENDIF
103   006C              ENDIF
104   006C                  ld      a,l     ;  leave 1/4 of the free memory for the stack
105   006C                  sub     e
106   006C                  ld      l,a
107   006C                  ld      a,h
108   006C                  sbc     d
109   006C                  ld      h,a
110   006C              
111   006C              ELSE
112   006C              
113   006C              IF DEFINED_USING_amalloc_2
114   006C                  sbc     hl,de   ;  leave 2/4 of the free memory for the stack
115   006C              IF DEFINED_USING_amalloc_1
116   006C                  sbc     hl,de   ;  leave 3/4 of the free memory for the stack
117   006C              ENDIF
118   006C              ENDIF
119   006C              
120   006C  ED 52           sbc     hl,de   ;  leave 1/4 of the free memory for the stack
121   006E              ENDIF
122   006E              
123   006E  C5              push    bc      ; main address for malloc area
124   006F  E5              push    hl      ; area size
125   0070                  EXTERN  sbrk_callee
126   0070  CD 00 00        call    sbrk_callee
127   0073              
144   0073              ENDIF
145   0073              
146   0073              IF CRT_ENABLE_COMMANDLINE = 1
147   0073  21 80 00        ld      hl,$80
148   0076  7E              ld      a,(hl)
149   0077                  ;ld      b,0
150   0077  44              ld      b,h
151   0078  A7              and     a
152   0079  CA F5 00        jp      z,argv_done
153   007C                  ;inc	hl
154   007C  4F              ld      c,a
155   007D  09              add     hl,bc   ;now points to the end of the command line
156   007E  0D              dec     c
157   007F                  INCLUDE	"crt/classic/crt_command_line.asm"
1     007F              ; Command line parsing
2     007F              
3     007F              ; Push pointers to argv[n] onto the stack now
4     007F              ; We must start from the end
5     007F              ; Entry:  hl = end of arguments
6     007F              ;	   c = length of arguments
7     007F              ;	   b = 0
8     007F              ; Exit:	  bc = argc
9     007F              ;         hl = argv
10    007F              
11    007F              IF CRT_ENABLE_COMMANDLINE = 1
12    007F  18 04           jr      argv_begin
13    0081              
14    0081  77 00       redir_fopen_flag:		defb	'w',0
15    0083  72          redir_fopen_flagr:		defb	'r'
16    0084  00          commandline_argv0:		defb	0
17    0085              
18    0085              argv_begin:
19    0085  11 00 00        ld      de,0	;NULL pointer at end of array, just in case
20    0088  D5              push    de
21    0089              ; Try to find the end of the arguments
22    0089              argv_loop_1:
23    0089  7E              ld      a,(hl)          ;Strip off trailing spaces
24    008A  FE 20           cp      ' '
25    008C  20 06           jr      nz,argv_loop_2
26    008E  36 00           ld      (hl),0
27    0090  2B              dec     hl
28    0091  0D              dec     c
29    0092  20 F5           jr      nz,argv_loop_1
30    0094              ; We've located the end of the last argument, try to find the start
31    0094              argv_loop_2:
32    0094  7E              ld      a,(hl)
33    0095  FE 20           cp      ' '
34    0097  20 58           jr      nz,argv_loop_3
35    0099  23              inc     hl              ; We're now on the first character of the argument
36    009A  0C              inc     c
37    009B              IF CRT_COMMANDLINE_REDIRECTION = 1
38    009B                      EXTERN freopen
39    009B  AF                  xor     a
40    009C  80                  add     b
41    009D  20 25               jr      nz,no_redir_stdout
42    009F  7E                  ld      a,(hl)
43    00A0  FE 3E               cp      '>'
44    00A2  20 20               jr      nz,no_redir_stdout
45    00A4  E5                  push    hl
46    00A5  23                  inc     hl
47    00A6  BE                  cp      (hl)
48    00A7  2B                  dec     hl
49    00A8  11 81 00            ld      de,redir_fopen_flag	; "a" or "w"
50    00AB  20 04               jr      nz,noappendb
51    00AD  3E 61               ld      a,'a'
52    00AF  12                  ld      (de),a
53    00B0  23                  inc     hl
54    00B1              noappendb:
55    00B1  23                  inc     hl
56    00B2              
57    00B2  C5                  push    bc
58    00B3  E5                  push    hl					; file name ptr
59    00B4  D5                  push    de
60    00B5  11 0A 00            ld      de,__sgoioblk+10		; file struct for stdout
61    00B8  D5                  push    de
62    00B9  CD 00 00            call    freopen
63    00BC  D1                  pop     de
64    00BD  D1                  pop     de
65    00BE  E1                  pop     hl
66    00BF  C1                  pop     bc
67    00C0  E1                  pop     hl
68    00C1  2B                  dec     hl
69    00C2  18 20               jr      argv_zloop
70    00C4              no_redir_stdout:
71    00C4  7E                  ld      a,(hl)
72    00C5  FE 3C               cp      '<'
73    00C7  20 17               jr      nz,no_redir_stdin
74    00C9  E5                  push    hl
75    00CA  23                  inc     hl
76    00CB  11 83 00            ld      de,redir_fopen_flagr
77    00CE  C5                  push    bc
78    00CF  E5                  push    hl					; file name ptr
79    00D0  D5                  push    de
80    00D1  11 00 00            ld      de,__sgoioblk		; file struct for stdin
81    00D4  D5                  push    de
82    00D5  CD 00 00            call    freopen
83    00D8  D1                  pop     de
84    00D9  D1                  pop     de
85    00DA  E1                  pop     hl
86    00DB  C1                  pop     bc
87    00DC  E1                  pop     hl
88    00DD  2B                  dec	    hl
89    00DE  18 04               jr      argv_zloop
90    00E0              no_redir_stdin:
91    00E0              ENDIF
92    00E0  E5              push    hl
93    00E1  04              inc     b
94    00E2              empty_arg:
95    00E2  2B              dec     hl
96    00E3  0D              dec     c
97    00E4              ; skip extra blanks
98    00E4              argv_zloop:
99    00E4  36 00           ld      (hl),0      ;Terminate the previous argument
100   00E6  2B              dec     hl          ;Last character of previous argument
101   00E7  0D              dec     c
102   00E8  28 0B           jr      z,argv_done
103   00EA  7E              ld      a,(hl)
104   00EB  FE 20           cp      ' '
105   00ED  28 F5           jr      z,argv_zloop ;Skip over multiple spaces
106   00EF  18 A3           jr      argv_loop_2  ;And do the next argument
107   00F1              
108   00F1              argv_loop_3:
109   00F1  2B              dec     hl
110   00F2  0D              dec     c
111   00F3  20 9F           jr      nz,argv_loop_2
112   00F5              
113   00F5              argv_done:
114   00F5                  ; We may still have an argument left (if it was at the start of the buffer)
115   00F5              
116   00F5              argv_push_final_arg:
117   00F5  7E              ld      a,(hl)              ;Strip leading spaces
118   00F6  FE 20           cp      ' '
119   00F8  20 03           jr      nz,argv_push_final_arg2
120   00FA  23              inc     hl
121   00FB  18 F8           jr      argv_push_final_arg
122   00FD              argv_push_final_arg2:
123   00FD  D1              pop     de                  ;Is it the same as the last argument we pushed?
124   00FE  D5              push    de
125   00FF  7C              ld      a,h
126   0100  92              sub     d
127   0101  20 04           jr      nz,argv_push_final_arg3
128   0103  7D              ld      a,l
129   0104  93              sub     e
130   0105  28 06           jr      z,argv_done_2
131   0107              argv_push_final_arg3:
132   0107  7E              ld      a,(hl)
133   0108  A7              and     a
134   0109  28 02           jr      z,argv_done_2
135   010B  E5              push    hl
136   010C  04              inc     b
137   010D              
138   010D              argv_done_2:
139   010D  21 84 00        ld      hl,commandline_argv0	;name of program (NULL)
140   0110  E5              push    hl
141   0111  04              inc     b
142   0112  21 00 00        ld      hl,0
143   0115  39              add     hl,sp	;address of argv
144   0116  48              ld      c,b
145   0117  06 00           ld      b,0
146   0119              ELSE
147   0119                  ld      hl,0    ;argv
148   0119                  ld      b,h     ;argc
149   0119                  ld      c,l
150   0119              ENDIF
151   0119              
152   0119              
153   0119              
158   0119  E5              push    hl	;argv
159   011A  C5              push    bc	;argc
160   011B              ELSE
161   011B                  ld      hl,0
162   011B                  push    hl  ;argv
163   011B                  push    hl  ;argc
164   011B              ENDIF
165   011B  CD 00 00        call    _main		;Call user code
166   011E  C1              pop     bc	;kill argv
167   011F  C1              pop     bc	;kill argc
168   0120              
169   0120  3A 5F 02        ld      a,(defltdsk)	;Restore default disc
170   0123  5F              ld      e,a
171   0124  0E 0E           ld      c,14
172   0126  CD 05 00        call    5
173   0129              
174   0129              cleanup:
175   0129  E5              push    hl		;Save return value
176   012A  CD 00 00        call    crt0_exit
177   012D  C1              pop     bc		;Get exit() value into bc
178   012E              start1:
179   012E  31 00 00        ld      sp,0		;Pick up entry sp
180   0131  C3 00 00        jp      0
181   0134              
182   0134  E9          l_dcal:	jp	(hl)		;Used for call by function ptr
183   0135              
184   0135              ; Memory banking for Spectrum +3
185   0135              IF (startup=3)
186   0135                  PUBLIC	pixelbyte
187   0135              pixelbyte:	defb	0		; temp byte storage for VDP driver
188   0135              
189   0135              p3_poke:
190   0135              		jp 0
191   0135              
192   0135              p3_peek:
193   0135              		jp 0
194   0135              
195   0135              pokebyte_code:
196   0135              		di
197   0135              		; ..$15 00010101 -> banks 4,5,6,3
198   0135              		; ..$11 00010001 -> banks 0,1,2,3 (TPA)
199   0135              		ex  af,af
200   0135              		ld	a,$15
201   0135              		;ld	a,$0D
202   0135              		;ld	a,$05
203   0135              		ld bc,$1ffd
204   0135              		out(c),a
205   0135              		ex af,af
206   0135              		ld (hl),a
207   0135              		ld	a,$11		; avoid using ($FF01) to be compatible with CP/M 2.2
208   0135              		;ld	a,$09
209   0135              		;ld	a,$01
210   0135              		;ld	a,($FF01)	; saved value
211   0135              		out(c),a
212   0135              		ei
213   0135              		ret
214   0135              		; adjust code size
215   0135              		nop
216   0135              peekbyte_code:
217   0135              		di
218   0135              		; ..$15 00010101 -> banks 4,5,6,3
219   0135              		; ..$11 00010001 -> banks 0,1,2,3 (TPA)
220   0135              		ld	a,$15
221   0135              		;ld	a,$0D
222   0135              		;ld	a,$05
223   0135              		ld bc,$1ffd
224   0135              		out(c),a
225   0135              		ld a,(hl)
226   0135              		ex  af,af
227   0135              		ld	a,$11		; avoid using ($FF01) to be compatible with CP/M 2.2
228   0135              		;ld	a,$09
229   0135              		;ld	a,$01
230   0135              		;ld	a,($FF01)	; saved value
231   0135              		out(c),a
232   0135              		ex  af,af
233   0135              		ei
234   0135              		ret
235   0135              		; adjust code size
236   0135              		nop
237   0135              ENDIF
238   0135              
239   0135              
240   0135                  INCLUDE "crt/classic/crt_runtime_selection.asm"
1     0135              ;
2     0135              ; Allow selection of the library functions at linktime
3     0135              ;
4     0135              ; Included by crt0 files
5     0135              ;
6     0135              
7     0135              
8     0135              ; scanf format picker
9     0135              
10    0135              ; Compatibility with the new library format picker. The classic library
11    0135              ; implements several of these together so there's an element of grouping.
12    0135              ;
13    0135              ; Default is to enable all converters except for float.
14    0135              ;
15    0135              ; Use -pragma-define:CLIB_OPT_SCANF=0x..... to control formatters
16    0135              ;
17    0135              ; bit 0 =  $    01 = enable %d
18    0135              ; bit 1 =  $    02 = enable %u
19    0135              ; bit 2 =  $    04 = enable %x
20    0135              ; bit 3 =  $    08 = enable %X (duplicate)
21    0135              ; bit 4 =  $    10 = enable %o
22    0135              ; bit 5 =  $    20 = enable %n
23    0135              ; bit 6 =  $    40 = enable %i
24    0135              ; bit 7 =  $    80 = enable %p
25    0135              ; bit 8 =  $   100 = enable %B
26    0135              ; bit 9 =  $   200 = enable %s
27    0135              ; bit 10 = $   400 = enable %c
28    0135              ; * bit 11 = $   800 = enable %I
29    0135              ; bit 12 = $  1000 = enable %ld
30    0135              ; bit 13 = $  2000 = enable %lu
31    0135              ; bit 14 = $  4000 = enable %lx
32    0135              ; bit 15 = $  8000 = enable %lX (duplicate)
33    0135              ; bit 16 = $ 10000 = enable %lo
34    0135              ; bit 17 = $ 20000 = enable %ln
35    0135              ; bit 18 = $ 40000 = enable %li
36    0135              ; bit 19 = $ 80000 = enable %lp
37    0135              ; bit 20 = $100000 = enable %lB
38    0135              ; * bit 21 = $200000 = enable %[
39    0135              ; * bit 22 = $  400000 = enable %a
40    0135              ; * bit 23 = $  800000 = enable %A
41    0135              ; bit 24 = $ 1000000 = enable %e
42    0135              ; bit 25 = $ 2000000 = enable %E
43    0135              ; bit 26 = $ 4000000 = enable %f
44    0135              ; bit 27 = $ 8000000 = enable %F
45    0135              ; bit 28 = $10000000 = enable %g
46    0135              ; bit 29 = $20000000 = enable %G
47    0135              ; bit 30 = $40000000 = enable flags handling
48    0135              
49    0135              IF DEFINED_CLIB_OPT_SCANF
50    0135              	; User has specified the configuration level - force scanf to be included
51    0135              	UNDEFINE NEED_scanf
52    0135              	DEFINE NEED_scanf
53    0135              ELSE
54    0135              	IF DEFINED_CRT_scanf_format
55    0135              	    ;Only defined as part of sccz80
56    0135              	    defc CLIB_OPT_SCANF = CRT_scanf_format
57    0135                      ELSE
58    0135              	    ; TODO: Some default configurations
59    0135                      ENDIF
60    0135              ENDIF
61    0135              
62    0135              
63    0135              IF NEED_scanf
64    0135              	PUBLIC	__scanf_format_table
65    0135              	EXTERN	__scanf_handle_d
66    0135              	EXTERN	__scanf_handle_u
67    0135              	EXTERN	__scanf_handle_o
68    0135              	EXTERN	__scanf_handle_x
69    0135              	EXTERN	__scanf_handle_p
70    0135              	EXTERN	__scanf_handle_B
71    0135              	EXTERN	__scanf_handle_f
72    0135              	EXTERN	__scanf_handle_s
73    0135              	EXTERN	__scanf_handle_c
74    0135              	EXTERN	__scanf_handle_n
75    0135              	EXTERN	__scanf_handle_i
76    0135              	EXTERN	__scanf_noop
77    0135              
78    0135              __scanf_format_table:
79    0135              IF CLIB_OPT_SCANF & $40040
80    0135              	defb	'i'
81    0135              	defw	__scanf_handle_i
82    0135              	defc	temp_CLIB_OPT_SCANF = CLIB_OPT_SCANF
83    0135              	UNDEFINE CLIB_OPT_SCANF
84    0135              	defc	CLIB_OPT_SCANF = temp_CLIB_OPT_SCANF | 0x3003 | 0x8c08c | 0x10010 | 0x100100
85    0135              ENDIF
86    0135              
87    0135              
88    0135              
89    0135              IF CLIB_OPT_SCANF & $2002
90    0135              	defb	'u'
91    0135              	defw	__scanf_handle_u
92    0135              ENDIF
93    0135              
94    0135              IF CLIB_OPT_SCANF & $1001
95    0135              	defb	'd'
96    0135              	defw	__scanf_handle_d
97    0135              ENDIF
98    0135              
99    0135              IF CLIB_OPT_SCANF & $c00c
100   0135              	defb	'x'
101   0135              	defw	__scanf_handle_x
102   0135              ENDIF
103   0135              
104   0135              IF CLIB_OPT_SCANF & $80080
105   0135              	defb	'p'
106   0135              	defw	__scanf_handle_x
107   0135              ENDIF
108   0135              
109   0135              IF CLIB_OPT_SCANF & $10010
110   0135              	defb	'o'
111   0135              	defw	__scanf_handle_o
112   0135              ENDIF
113   0135              
114   0135              IF CLIB_OPT_SCANF & $100100
115   0135              	defb	'B'
116   0135              	defw	__scanf_handle_B
117   0135              ENDIF
118   0135              
119   0135              IF CLIB_OPT_SCANF & $20020
120   0135              	defb	'n'
121   0135              	defw	__scanf_handle_n
122   0135              ENDIF
123   0135              
124   0135              IF CLIB_OPT_SCANF & $200
125   0135              	defb	's'
126   0135              	defw	__scanf_handle_s
127   0135              ENDIF
128   0135              
129   0135              IF CLIB_OPT_SCANF & $400
130   0135              	defb	'c'
131   0135              	defw	__scanf_handle_c
132   0135              ENDIF
133   0135              
134   0135              IF CLIB_OPT_SCANF & $4000000
135   0135              	defb	'f'
136   0135              	defw	__scanf_handle_f
137   0135              ENDIF
138   0135              
139   0135              IF CLIB_OPT_SCANF & $1000000
140   0135              	defb	'e'
141   0135              	defw	__scanf_handle_f
142   0135              ENDIF
143   0135              IF CLIB_OPT_SCANF & $10000000
144   0135              	defb	'g'
145   0135              	defw	__scanf_handle_f
146   0135              ENDIF
147   0135              
148   0135              	defb	0	;end marker
149   0135              ENDIF
150   0135              
151   0135              ;
152   0135              ; printf format picker
153   0135              ;
154   0135              
155   0135              
156   0135              IF DEFINED_CLIB_OPT_PRINTF
157   0135              	; User has specified the configuration level - force printf to be included
158   0135              	UNDEFINE NEED_printf
159   0135              	DEFINE NEED_printf
160   0135              ELSE
161   0135              	IF DEFINED_CRT_printf_format
162   0135              	    ;Only defined as part of sccz80
163   0135              	    defc CLIB_OPT_PRINTF = CRT_printf_format
164   0135                      ELSE
165   0135              	    ; Default configurations to match old behaviour
166   0135              	    ; The built in one is roughly the old ministdio
167   0135              	    IF DEFINED_complexstdio
168   0135                              defc CLIB_OPT_PRINTF = 0x851BF7BF
169   0135                          ELSE
170   0135              	        defc CLIB_OPT_PRINTF = 0x801BF7BF
171   0135                          ENDIF
172   0135                      ENDIF
173   0135              ENDIF
174   0135              
175   0135              IF DEFINED_CLIB_OPT_PRINTF_2
176   0135              	; User has specified the configuration level - force printf to be included
177   0135              	UNDEFINE NEED_printf
178   0135              	DEFINE NEED_printf
179   0135              ENDIF
180   0135              
181   0135              IF NEED_printf
182   0135              	PUBLIC	__printf_format_table
183   0135              	PUBLIC  __printf_format_table64
184   0135              	EXTERN	__printf_handle_d
185   0135              	EXTERN	__printf_handle_u
186   0135              	EXTERN	__printf_handle_o
187   0135              	EXTERN	__printf_handle_x
188   0135              	EXTERN	__printf_handle_X
189   0135              	EXTERN	__printf_handle_p
190   0135              	EXTERN	__printf_handle_e
191   0135              	EXTERN	__printf_handle_f
192   0135              	EXTERN	__printf_handle_s
193   0135              	EXTERN	__printf_handle_c
194   0135              	EXTERN	__printf_handle_n
195   0135              	EXTERN	__printf_handle_B
196   0135              	EXTERN	__printf_handle_ll
197   0135              	EXTERN	__printf_handle_lld
198   0135              	EXTERN	__printf_handle_llu
199   0135              	EXTERN	__printf_handle_llo
200   0135              	EXTERN	__printf_handle_llx
201   0135              	EXTERN	__printf_handle_llX
202   0135              	EXTERN	__printf_handle_llB
203   0135              
204   0135              __printf_format_table:
205   0135              
206   0135              IF CLIB_OPT_PRINTF & $2002
207   0135              	defb	'u'
208   0135              	defw	__printf_handle_u
209   0135              ENDIF
210   0135              
211   0135              IF CLIB_OPT_PRINTF & $1001
212   0135  64          	defb	'd'
213   0136  00 00       	defw	__printf_handle_d
214   0138              ENDIF
215   0138              
216   0138              IF CLIB_OPT_PRINTF & $4004
217   0138              	defb	'x'
218   0138              	defw	__printf_handle_x
219   0138              ENDIF
220   0138              
221   0138              IF CLIB_OPT_PRINTF & $8008
222   0138              	defb	'X'
223   0138              	defw	__printf_handle_X
224   0138              ENDIF
225   0138              
226   0138              IF CLIB_OPT_PRINTF & $80080
227   0138              	defb	'p'
228   0138              	defw	__printf_handle_x
229   0138              ENDIF
230   0138              
231   0138              IF CLIB_OPT_PRINTF & $100100
232   0138              	defb	'B'
233   0138              	defw	__printf_handle_B
234   0138              ENDIF
235   0138              
236   0138              IF CLIB_OPT_PRINTF  & $10010
237   0138              	defb	'o'
238   0138              	defw	__printf_handle_o
239   0138              ENDIF
240   0138              
241   0138              IF CLIB_OPT_PRINTF & $20020
242   0138              	defb	'n'
243   0138              	defw	__printf_handle_n
244   0138              ENDIF
245   0138              
246   0138              IF CLIB_OPT_PRINTF & $200
247   0138  73          	defb	's'
248   0139  00 00       	defw	__printf_handle_s
249   013B              ENDIF
250   013B              
251   013B              IF CLIB_OPT_PRINTF & $400
252   013B              	defb	'c'
253   013B              	defw	__printf_handle_c
254   013B              ENDIF
255   013B              
256   013B              IF CLIB_OPT_PRINTF & $4000000
257   013B              	defb	'f'
258   013B              	defw	__printf_handle_f
259   013B              ENDIF
260   013B              
261   013B              IF CLIB_OPT_PRINTF  & $1000000
262   013B              	defb	'e'
263   013B              	defw	__printf_handle_e
264   013B              ENDIF
265   013B              IF CLIB_OPT_PRINTF & $10000000
266   013B              	defb	'g'
267   013B              	defw	__printf_handle_f
268   013B              ENDIF
269   013B              IF CLIB_OPT_PRINTF_2
270   013B              	defb	'l'
271   013B              	defw	__printf_handle_ll
272   013B              ENDIF
273   013B  00          	defb	0	;end marker
274   013C              
275   013C              __printf_format_table64:
276   013C              
277   013C              IF CLIB_OPT_PRINTF_2 & $02
278   013C              	defb	'u'
279   013C              	defw	__printf_handle_llu
280   013C              ENDIF
281   013C              
282   013C              IF CLIB_OPT_PRINTF_2 & $01
283   013C              	defb	'd'
284   013C              	defw	__printf_handle_lld
285   013C              ENDIF
286   013C              
287   013C              IF CLIB_OPT_PRINTF_2 & $04
288   013C              	defb	'x'
289   013C              	defw	__printf_handle_llx
290   013C              ENDIF
291   013C              
292   013C              IF CLIB_OPT_PRINTF_2 & $08
293   013C              	defb	'X'
294   013C              	defw	__printf_handle_llX
295   013C              ENDIF
296   013C              IF CLIB_OPT_PRINTF_2  & $10
297   013C              	defb	'o'
298   013C              	defw	__printf_handle_llo
299   013C              ENDIF
300   013C              IF CLIB_OPT_PRINTF_2 & $100
301   013C              	defb	'B'
302   013C              	defw	__printf_handle_llB
303   013C              ENDIF
304   013C  00          	defb	0	;endmarker
305   013D              
306   013D              
307   013D              
308   013D              IF CLIB_OPT_PRINTF & $40000000
309   013D              	EXTERN	__printf_get_flags_impl
310   013D              	PUBLIC	__printf_get_flags
311   013D              	defc	__printf_get_flags = __printf_get_flags_impl
312   013D              ELSE
313   013D              	EXTERN	__printf_get_flags_noop
314   013D              	PUBLIC	__printf_get_flags
315   013D              	defc	__printf_get_flags = __printf_get_flags_noop
316   013D              ENDIF
317   013D              
318   013D              ENDIF
319   013D              
320   013D              
321   013D              ;--------
322   013D              ; Allow a compile time switch between native output and ANSI terminal
323   013D              ;
324   013D              ; -pragma-need=ansiterminal
325   013D              ;--------
326   013D              
327   013D              IF NEED_ansiterminal
328   013D              	PUBLIC		fputc_cons
329   013D              	EXTERN		fputc_cons_ansi
330   013D              	EXTERN		puts_cons_ansi
331   013D              	defc DEFINED_fputc_cons = 1
332   013D              	defc DEFINED_puts_cons = 1
333   013D              	defc fputc_cons = fputc_cons_ansi
334   013D              
335   013D              	; Bridge VT100 to gencon
336   013D                      IF DEFINED_CLIB_ANSITERMINAL_BRIDGE & CLIB_ANSITERMINAL_BRIDGE != 0
337   013D                          PUBLIC ansi_attr
338   013D                          PUBLIC ansi_BEL
339   013D                          PUBLIC ansi_cls
340   013D                          PUBLIC ansi_CHAR
341   013D                          PUBLIC ansi_del_line
342   013D                          PUBLIC ansi_SCROLLUP
343   013D                          EXTERN __gencon_ansi_attr
344   013D                          EXTERN __gencon_ansi_BEL
345   013D                          EXTERN __gencon_ansi_cls
346   013D                          EXTERN __gencon_ansi_CHAR
347   013D                          EXTERN __gencon_ansi_del_line
348   013D                          EXTERN __gencon_ansi_SCROLLUP
349   013D                          defc ansi_attr = __gencon_ansi_attr
350   013D                          defc ansi_BEL = __gencon_ansi_BEL
351   013D                          defc ansi_cls = __gencon_ansi_cls
352   013D                          defc ansi_CHAR = __gencon_ansi_CHAR
353   013D                          defc ansi_del_line = __gencon_ansi_del_line
354   013D                          defc ansi_SCROLLUP = __gencon_ansi_SCROLLUP
355   013D              
356   013D                          ; We're using gencon, don't include an ANSIfont
357   013D                          UNDEFINE TAR__no_ansifont
358   013D                          defc TAR__no_ansifont = 1
359   013D              	    IF !DEFINED_ansicolumns
360   013D                              defc ansicolumns = CONSOLE_COLUMNS
361   013D                              defc DEFINED_ansicolumns = 1
362   013D                          ENDIF
363   013D                      ENDIF
364   013D              
365   013D                     	PUBLIC ansicolumns
366   013D              
367   013D              	IF !TAR__no_ansifont
368   013D                      	PUBLIC ansicharacter_pixelwidth
369   013D              		PUBLIC ansifont
370   013D                      	PUBLIC ansifont_is_packed
371   013D                      ELSE
372   013D                              defc DEFINED_ansifont = 1
373   013D              	ENDIF
374   013D              
375   013D              	IF !ansipixels
376   013D              		defc ansipixels = 256
377   013D              	ENDIF
378   013D              
379   013D              	IF !DEFINED_ansicolumns
380   013D              		 defc ansicolumns = 64
381   013D              	ENDIF
382   013D              
383   013D              	UNDEFINE CONSOLE_COLUMNS
384   013D              	defc CONSOLE_COLUMNS = ansicolumns
385   013D              
386   013D              	IF DEFINED_ansirows
387   013D              		UNDEFINE CONSOLE_ROWS
388   013D              		defc CONSOLE_ROWS = ansirows
389   013D              	ENDIF
390   013D              
391   013D              
392   013D              	IF (ansicolumns = (ansipixels/2))
393   013D              	    defc ansicharacter_pixelwidth = 2
394   013D                          IF !DEFINED_ansifont
395   013D                          	EXTERN ansifont_f4pack
396   013D              	    	defc ansifont = ansifont_f4pack
397   013D                          	defc ansifont_is_packed = 1
398   013D                          ENDIF
399   013D              	ENDIF
400   013D              	IF (ansicolumns = (ansipixels/3))
401   013D              	    defc ansicharacter_pixelwidth = 3
402   013D                          IF !DEFINED_ansifont
403   013D                              EXTERN ansifont_f4pack
404   013D              	        defc ansifont = ansifont_f4pack
405   013D                              defc ansifont_is_packed = 1
406   013D              	    ENDIF
407   013D              	ENDIF
408   013D              	IF (ansicolumns = (ansipixels/4))
409   013D              	    defc ansicharacter_pixelwidth = 4
410   013D                          IF !DEFINED_ansifont
411   013D                              EXTERN ansifont_f4pack
412   013D              	        defc ansifont = ansifont_f4pack
413   013D                              defc ansifont_is_packed = 1
414   013D              	    ENDIF
415   013D              	ENDIF
416   013D              	IF (ansicolumns = (ansipixels/5))
417   013D              	    defc ansicharacter_pixelwidth = 5
418   013D                          IF !DEFINED_ansifont
419   013D                              EXTERN ansifont_f5
420   013D              	        defc ansifont = ansifont_f5
421   013D                              defc ansifont_is_packed = 0
422   013D              	    ENDIF
423   013D              	ENDIF
424   013D              	IF (ansicolumns = (ansipixels/6))
425   013D              	    defc ansicharacter_pixelwidth = 6
426   013D                          IF !DEFINED_ansifont
427   013D                              EXTERN ansifont_f6
428   013D              	        defc ansifont = ansifont_f6
429   013D                              defc ansifont_is_packed = 0
430   013D              	    ENDIF
431   013D              	ENDIF
432   013D              	IF (ansicolumns = (ansipixels/7))
433   013D              	    defc ansicharacter_pixelwidth = 7
434   013D                          IF !DEFINED_ansifont
435   013D                              EXTERN ansifont_f8
436   013D              	        defc ansifont = ansifont_f8
437   013D                              defc ansifont_is_packed = 0
438   013D              	    ENDIF
439   013D              	ENDIF
440   013D              	IF (ansicolumns = (ansipixels/8))
441   013D              	    defc ansicharacter_pixelwidth = 8
442   013D                          IF !DEFINED_ansifont
443   013D                              EXTERN ansifont_f8
444   013D              	        defc ansifont = ansifont_f8
445   013D                              defc ansifont_is_packed = 0
446   013D              	    ENDIF
447   013D              	ENDIF
448   013D              	IF (ansicolumns = (ansipixels/9))
449   013D              	    defc ansicharacter_pixelwidth = 9
450   013D                          IF !DEFINED_ansifont
451   013D                              EXTERN ansifont_f8
452   013D              	        defc ansifont = ansifont_f8
453   013D                              defc ansifont_is_packed = 0
454   013D              	    ENDIF
455   013D              	ENDIF
456   013D              
457   013D              	IF (ansipixels = 512)
458   013D              		IF (ansicolumns = 48)
459   013D              			defc ansicharacter_pixelwidth = 9
460   013D              			IF !DEFINED_ansifont
461   013D              				EXTERN ansifont_f8
462   013D              				defc ansifont = ansifont_f8
463   013D              				defc ansifont_is_packed = 0
464   013D              			ENDIF
465   013D              		ENDIF
466   013D              		IF (ansicolumns = 80)
467   013D              			defc ansicharacter_pixelwidth = 6
468   013D              			IF !DEFINED_ansifont
469   013D              				EXTERN ansifont_f6
470   013D              				defc ansifont = ansifont_f6
471   013D              				defc ansifont_is_packed = 0
472   013D              			ENDIF
473   013D              		ENDIF
474   013D              		IF (ansicolumns = 160)
475   013D              			defc ansicharacter_pixelwidth = 3
476   013D              			IF !DEFINED_ansifont
477   013D              				EXTERN ansifont_f4pack
478   013D              				defc ansifont = ansifont_f4pack
479   013D              				defc ansifont_is_packed = 1
480   013D              			ENDIF
481   013D              		ENDIF
482   013D              	ENDIF
483   013D              
484   013D              	IF (ansipixels = 256)
485   013D              		IF (ansicolumns = 24)
486   013D              			defc ansicharacter_pixelwidth = 9
487   013D              			IF !DEFINED_ansifont
488   013D              				EXTERN ansifont_f8
489   013D              				defc ansifont = ansifont_f8
490   013D              				defc ansifont_is_packed = 0
491   013D              			ENDIF
492   013D              		ENDIF
493   013D              		IF (ansicolumns = 40)
494   013D              			defc ansicharacter_pixelwidth = 6
495   013D              			IF !DEFINED_ansifont
496   013D              				EXTERN ansifont_f6
497   013D              				defc ansifont = ansifont_f6
498   013D              				defc ansifont_is_packed = 0
499   013D              			ENDIF
500   013D              		ENDIF
501   013D              		IF (ansicolumns = 80)
502   013D              			defc ansicharacter_pixelwidth = 3
503   013D              			IF !DEFINED_ansifont
504   013D              				EXTERN ansifont_f4pack
505   013D              				defc ansifont = ansifont_f4pack
506   013D              				defc ansifont_is_packed = 1
507   013D              			ENDIF
508   013D              		ENDIF
509   013D              	ENDIF
510   013D              
511   013D              ENDIF
512   013D              
513   013D              ; If it's not been overridden by anybody, lets use the native output
514   013D              IF !DEFINED_fputc_cons
515   013D              	PUBLIC		fputc_cons
516   013D              	defc DEFINED_fputc_cons = 1
517   013D                      IF !TAR__fputc_cons_generic
518   013D              	     EXTERN	fputc_cons_native
519   013D                	     defc fputc_cons = fputc_cons_native
520   013D                      ELSE
521   013D              	     EXTERN	fputc_cons_generic
522   013D                	     defc fputc_cons = fputc_cons_generic
523   013D                      ENDIF
524   013D              ENDIF
525   013D              
526   013D              IF DEFINED_fputc_cons
527   013D              	PUBLIC		_fputc_cons
528   013D              	defc		_fputc_cons = fputc_cons
529   013D              
530   013D              ENDIF
531   013D              
532   013D              IF !DEFINED_getk
533   013D                 IF !DEFINED_fgetc_cons
534   013D                    IF TAR__fgetc_cons_inkey
535   013D                        EXTERN fgetc_cons_inkey
536   013D                        EXTERN getk_inkey
537   013D                        PUBLIC fgetc_cons
538   013D                        PUBLIC _fgetc_cons
539   013D                        PUBLIC getk
540   013D                        PUBLIC _getk
541   013D                        defc fgetc_cons = fgetc_cons_inkey
542   013D                        defc _fgetc_cons = fgetc_cons_inkey
543   013D                        defc getk = getk_inkey
544   013D                        defc _getk = getk_inkey
545   013D                    ENDIF
546   013D                 ENDIF
547   013D              ENDIF
548   013D              
549   013D              IF DEFINED_fgetc_cons
550   013D                IF !DEFINED__fgetc_cons
551   013D                    PUBLIC _fgetc_cons
552   013D                    defc _fgetc_cons = fgetc_cons
553   013D                ENDIF
554   013D              ENDIF
555   013D              
556   013D              IF DEFINED_getk
557   013D                IF !DEFINED__getk
558   013D                    PUBLIC _getk
559   013D                    defc _getk = getk
560   013D                ENDIF
561   013D              ENDIF
562   013D              
563   013D              
564   013D              ;TODO: These need to go into rules
565   013D              IF CONSOLE_COLUMNS
566   013D              	PUBLIC CONSOLE_COLUMNS
567   013D              ENDIF
568   013D              IF CONSOLE_ROWS
569   013D              	PUBLIC CONSOLE_ROWS
570   013D              ENDIF
571   013D              
572   013D              IF !CONSOLE_XOFFSET
573   013D                  defc CONSOLE_XOFFSET = 0
574   013D              ENDIF
575   013D              PUBLIC CONSOLE_XOFFSET
576   013D              IF !CONSOLE_YOFFSET
577   013D                  defc CONSOLE_YOFFSET = 0
578   013D              ENDIF
579   013D              PUBLIC CONSOLE_YOFFSET
580   013D              
581   013D              IF !CLIB_KBHIT_NOSTORE
582   013D                  defc CLIB_KBHIT_NOSTORE = 0
583   013D              ENDIF
584   013D              PUBLIC CLIB_KBHIT_NOSTORE
585   013D              
586   013D              
587   013D              
241   013D                  INCLUDE	"crt/classic/crt_section.asm"
1     013D              ; Memory map and section setup
2     013D              ;
3     013D              ; Contains the generic variables + features
4     013D              
5     013D              ;
6     013D              ; crt_model = 0		; everything in RAM
7     013D              ; crt_model = 1		; ROM model, data section copied
8     013D              ; crt_model = 2		; ROM model, data section compressed with zx7
9     013D              ; crt_model = 3		; ROM model, data section compressed with zx0
10    013D              
11    013D              ; Include the default memory map. You can override this
12    013D              
13    013D              IF __MMAP == -1
14    013D                  ; The user has supplied a memory map.
15    013D                  INCLUDE	"./mmap.inc"
16    013D              ELSE
17    013D                  ; Include the standard memory map
18    013D                  INCLUDE	"crt/classic/crt_section_standard.asm"
1     013D              ; Classic Memory map and section setup
2     013D              ;
3     013D              ; This layout suits all the classic machines. Memory placement is
4     013D              ; affected by:
5     013D              ;
6     013D              ; CRT_MODEL: RAM/ROM configuration
7     013D              ; CRT_ORG_CODE: Where code starts executing from
8     013D              ; CRT_ORG_BSS:  Where uninitialised global variables are placed
9     013D              ; CRT_ORG_GRAPHICS: Where graphics routines + variables are stored (certain ports only)
10    013D              
11    013D              ;
12    013D              ; Contains the generic variables + features
13    013D              
14    013D              ;
15    013D              ; crt_model = 0		; everything in RAM
16    013D              ; crt_model = 1		; ROM model, data section copied
17    013D              ; crt_model = 2		; ROM model, data section compressed (zx7)
18    013D              ; crt_model = 3		; ROM model, data section compressed (zx0)
19    013D              
20    013D              
21    013D              
22    013D                  INCLUDE "crt/classic/crt_section_code.inc"
1     013D              ; CODE sections defined by the classic library
2     013D              
3     013D                  SECTION CODE
4     0000                  SECTION code_crt_init
5     0000                  SECTION code_crt_init_exit
6     0000                  SECTION code_crt_exit
7     0000                  SECTION code_crt_exit_exit
8     0000                  SECTION code_driver
9     0000                  SECTION rodata_driver       ;Keep it in low memoey
10    0000                  SECTION code_compiler
11    0000                  SECTION code_clib
12    0000                  SECTION code_l
13    0000                  SECTION code_l_sdcc
14    0000                  SECTION code_l_sccz80
15    0000                  SECTION code_compress_zx7
16    0000                  SECTION code_compress_zx0
17    0000                  SECTION code_compress_zx1
18    0000                  SECTION code_compress_zx2
19    0000                  SECTION code_compress_aplib
20    0000                  SECTION code_ctype
21    0000                  SECTION code_esxdos
22    0000                  SECTION code_fp
23    0000                  SECTION code_fp_math48
24    0000                  SECTION code_fp_math32
25    0000                  SECTION code_fp_math16
26    0000                  SECTION code_fp_mbf32
27    0000                  SECTION code_fp_mbf64
28    0000                  SECTION code_fp_am9511
29    0000                  SECTION code_fp_dai32
30    0000                  SECTION code_math
31    0000                  SECTION code_error
32    0000                  SECTION code_stdlib
33    0000                  SECTION code_string
34    0000                  SECTION code_adt_b_array
35    0000                  SECTION code_adt_b_vector
36    0000                  SECTION code_adt_ba_priority_queue
37    0000                  SECTION code_adt_ba_stack
38    0000                  SECTION code_adt_bv_priority_queue
39    0000                  SECTION code_adt_bv_stack
40    0000                  SECTION code_adt_p_forward_list
41    0000                  SECTION code_adt_p_forward_list_alt
42    0000                  SECTION code_adt_p_list
43    0000                  SECTION code_adt_p_queue
44    0000                  SECTION code_adt_p_stack
45    0000                  SECTION code_adt_w_array
46    0000                  SECTION code_adt_w_vector
47    0000                  SECTION code_adt_wa_priority_queue
48    0000                  SECTION code_adt_wa_stack
49    0000                  SECTION code_adt_wv_priority_queue
50    0000                  SECTION code_adt_wv_stack
51    0000                  SECTION code_alloc_balloc
52    0000                  SECTION code_alloc_obstack
53    0000                  SECTION code_arch
54    0000                  SECTION code_font
55    0000                  SECTION code_font_fzx
56    0000                  SECTION code_psg
57    0000                  SECTION code_sound_ay
58    0000                  SECTION code_PSGlib
59    0000                  SECTION code_time
60    0000                  SECTION code_z80
61    0000                  SECTION code_sprite_sp1
62    0000                  SECTION code_temp_sp1
63    0000                  SECTION code_splib2
64    0000              IF !__crt_org_graphics
65    0000                  SECTION code_graphics
66    0000              ENDIF
67    0000                  SECTION code_user
68    0000                  SECTION CODE_END
69    0000              
23    0000                  INCLUDE "crt/classic/crt_section_rodata.inc"
1     0000              ; RODATA sections defined by the classic library
2     0000              
3     0000                  SECTION RODATA
4     0000                  SECTION rodata_fp
5     0000                  SECTION rodata_fp_math48
6     0000                  SECTION rodata_fp_math32
7     0000                  SECTION rodata_fp_math16
8     0000                  SECTION rodata_fp_mbf32
9     0000                  SECTION rodata_fp_mbf64
10    0000                  SECTION rodata_fp_am9511
11    0000                  SECTION rodata_fp_dai32
12    0000                  SECTION rodata_arch
13    0000                  SECTION rodata_compiler
14    0000                  SECTION rodata_clib
15    0000                  SECTION rodata_psg
16    0000                  SECTION rodata_sound_ay
17    0000              IF !__crt_org_graphics
18    0000                  SECTION rodata_graphics
19    0000              ENDIF
20    0000                  SECTION rodata_user
21    0000                  SECTION rodata_font
22    0000                  SECTION rodata_font_fzx
23    0000                  SECTION rodata_font_4x8
24    0000                  SECTION rodata_font_6x8
25    0000                  SECTION rodata_font_8x8
26    0000                  SECTION rodata_font_8x10
27    0000                  SECTION rodata_font_ansi
28    0000                  SECTION rodata_splib2
29    0000                  ; Keep the following section last of all
30    0000                  SECTION rodata_appdor
31    0000                  SECTION RODATA_END
32    0000              
24    0000                  SECTION ROMABLE_END
25    0000              IF !__crt_model
26    0000                  INCLUDE "crt/classic/crt_section_data.inc"
1     0000              
2     0000              
3     0000                  SECTION DATA
4     0000                IF !__crt_org_graphics
5     0000                  SECTION smc_clib
6     0000                ENDIF
7     0000                  SECTION smc_fp
8     0000                  SECTION smc_compress
9     0000                  SECTION smc_user
10    0000                  SECTION data_driver
11    0000                  SECTION data_clib
12    0000                  SECTION data_stdlib
13    0000                  SECTION data_psg
14    0000                  SECTION data_sound_ay
15    0000                  SECTION	data_PSGlib
16    0000                IF !__crt_org_graphics
17    0000                  SECTION data_graphics
18    0000                ENDIF
19    0000                  SECTION data_crt
20    0000                  SECTION data_fp_mbf32
21    0000                  SECTION data_arch
22    0000                  SECTION data_compiler
23    0000                  SECTION data_splib2
24    0000                  SECTION data_user
25    0000                  SECTION data_alloc_balloc
26    0000                  SECTION DATA_END
27    0000              
27    0000              ENDIF
28    0000                  INCLUDE "crt/classic/crt_section_bss.inc"
1     0000                  SECTION BSS
2     0000              IF __crt_org_bss
3     0000                  org     __crt_org_bss
4     0000                  defb    0   ; control name of bss binary
5     0000              ENDIF
6     0000                  SECTION bss_fp
7     0000                  SECTION bss_fp_math32
8     0000                  SECTION bss_fp_math16
9     0000                  SECTION bss_fp_mbf32
10    0000                  SECTION bss_fp_mbf64
11    0000                  SECTION bss_fp_am9511
12    0000                  SECTION bss_fp_dai32
13    0000                  SECTION bss_compress_aplib
14    0000                  SECTION bss_error
15    0000                  SECTION bss_crt
16    0000                  SECTION bss_fardata
17    0000              IF __crt_org_bss_fardata_start
18    0000                  org	__crt_org_bss_fardata_start
19    0000              ENDIF
20    0000                  SECTION bss_compiler
21    0000              IF __crt_org_bss_compiler_start
22    0000                  org	__crt_org_bss_compiler_start
23    0000              ENDIF
24    0000                  SECTION bss_driver
25    0000                  SECTION bss_arch
26    0000                  SECTION bss_clib
27    0000                  SECTION bss_string
28    0000                  SECTION bss_alloc_balloc
29    0000              IF !__crt_org_graphics
30    0000                  SECTION bss_graphics
31    0000              ENDIF
32    0000                  SECTION bss_psg
33    0000                  SECTION bss_sound_ay
34    0000                  SECTION	bss_PSGlib
35    0000                  SECTION bss_splib2
36    0000                  SECTION bss_user
37    0000              
29    0000              
30    0000              IF __crt_model > 0
31    0000                  SECTION DATA
32    0000                  org     -1
33    0000                  defb    0		; control name of data binary
34    0000                  INCLUDE "crt/classic/crt_section_data.inc"
35    0000              ENDIF
36    0000                  SECTION BSS_END
37    0000              
38    0000              IF __crt_org_graphics
39    0000                  SECTION	HIMEM
40    0000                  org	__crt_org_graphics
41    0000                  SECTION smc_clib
42    0000                  SECTION code_graphics
43    0000                  SECTION code_himem
44    0000                  SECTION rodata_graphics
45    0000                  SECTION rodata_himem
46    0000                  SECTION data_himem
47    0000                  SECTION data_graphics
48    0000                  SECTION bss_graphics
49    0000                  SECTION bss_himem
50    0000                  SECTION HIMEM_END
51    0000              ENDIF
52    0000              
19    0000              ENDIF
20    0000              
21    0000              
22    0000              ; The classic CRTs need some things setup, so do it
23    0000              
24    0000                  SECTION code_crt_init
25    0000              crt0_init_bss:
26    0000                  EXTERN  __BSS_head
27    0000                  EXTERN  __BSS_END_tail
28    0000              IF CRT_INITIALIZE_BSS = 1
29    0000  21 00 00        ld      hl,__BSS_head
30    0003  01 FF FF        ld      bc,__BSS_END_tail - __BSS_head - 1
31    0006                IF !__CPU_INTEL__ && !__CPU_GBZ80__
32    0006  11 01 00        ld      de,__BSS_head + 1
33    0009  AF              xor     a
34    000A  77              ld	(hl),a
35    000B  ED B0           ldir
36    000D                ELSE
37    000D              init_8080_1:
38    000D                  ld	(hl),0
39    000D                  inc	hl
40    000D                  dec	bc
41    000D                  ld	a,b
42    000D                  or	c
43    000D                  jp	nz,init_8080_1
44    000D                ENDIF
45    000D              ELSE
46    000D                  xor     a
47    000D              ENDIF
48    000D              
49    000D                  ; a = 0 - reset exitcount
50    000D  32 68 00        ld      (exitcount),a
51    0010              IF CRT_ENABLE_STDIO = 1
52    0010              	; Setup std* streams
53    0010  21 02 00        ld      hl,__sgoioblk+2
54    0013  36 13           ld      (hl),19 ;stdin
55    0015  21 0C 00        ld      hl,__sgoioblk+12
56    0018  36 15           ld      (hl),21 ;stdout
57    001A  21 16 00        ld      hl,__sgoioblk+22
58    001D  36 15           ld      (hl),21 ;stderr
59    001F              ENDIF
60    001F              IF DEFINED_USING_amalloc
61    001F                IF __CPU_GBZ80__
62    001F                  ld      hl,__BSS_END_tail
63    001F                  ld      a,l
64    001F                  ld      (_heap),a
65    001F                  ld      a,h
66    001F                  ld      (_heap+1),a
67    001F                ELSE
68    001F  21 00 00        ld      hl,__BSS_END_tail
69    0022  22 69 00        ld      (_heap),hl
70    0025                ENDIF
71    0025              ENDIF
72    0025              IF ( __crt_model = 1 )
73    0025                  ; Just copy the DATA section
74    0025                  EXTERN	__ROMABLE_END_tail
75    0025                  EXTERN	__DATA_head
76    0025                  EXTERN	__DATA_END_tail
77    0025                  ld	hl,__ROMABLE_END_tail
78    0025                  ld	de,__DATA_head
79    0025                  ld	bc,__DATA_END_tail - __DATA_head
80    0025                  EXTERN  asm_memcpy
81    0025                  call    asm_memcpy
82    0025              ELIF ( __crt_model >= 2 )
83    0025                  EXTERN	__ROMABLE_END_tail
84    0025                  EXTERN	__DATA_head
85    0025                  ld      hl,__ROMABLE_END_tail
86    0025                  ld      de,__DATA_head
87    0025                IF ( __crt_model = 2)
88    0025                  EXTERN  asm_dzx7_standard
89    0025                  call    asm_dzx7_standard
90    0025                ELIF ( __crt_model = 3)
91    0025                  EXTERN  asm_dzx0_standard
92    0025                  call    asm_dzx0_standard
93    0025                ENDIF
94    0025              ENDIF
95    0025              
96    0025                  SECTION code_crt_init_exit
97    0000  C9              ret
98    0001                  SECTION code_crt_exit
99    0000              crt0_exit:
100   0000                  ; Teardown code can go here
101   0000                  SECTION code_crt_exit_exit
102   0000  C9              ret
103   0001              
104   0001                  SECTION bss_crt
105   0000              IF CRT_ENABLE_STDIO = 1
106   0000                  PUBLIC	__sgoioblk
107   0000                  PUBLIC	__sgoioblk_end
108   0000  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0020  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0040  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      0060  00 00 00 00 
                        __sgoioblk:     defs    CLIB_FOPEN_MAX * 10      ;stdio control block
109   0064              __sgoioblk_end:   		 ;end of stdio control block
110   0064              ENDIF
111   0064              
112   0064              
113   0064              
114   0064              
115   0064              IF !DEFINED_basegraphics
116   0064                  PUBLIC	base_graphics
117   0064  00 00       base_graphics:   defw    0       ;Address of graphics map
118   0066              ENDIF
119   0066                  PUBLIC	exitsp
120   0066                  PUBLIC	exitcount
121   0066  00 00       exitsp:          defw    0       ;atexit() stack
122   0068  00          exitcount:       defb    0       ;Number of atexit() routines
123   0069              IF DEFINED_USING_amalloc
124   0069                  PUBLIC _heap
125   0069                  ; The heap pointer will be wiped at startup,
126   0069                  ; but first its value (based on __tail)
127   0069                  ; will be kept for sbrk() to setup the malloc area
128   0069              _heap:
129   0069  00 00           defw 0          ; Initialised by code_crt_init - location of the last program byte
130   006B  00 00           defw 0
131   006D              ENDIF
132   006D              
133   006D              IF CLIB_BALLOC_TABLE_SIZE > 0
134   006D              
135   006D                 ; create balloc table
136   006D                 SECTION data_alloc_balloc
137   006D                 PUBLIC __balloc_array
138   006D                 __balloc_array:             defw __balloc_table
139   006D              
140   006D                 SECTION bss_alloc_balloc
141   006D                 PUBLIC __balloc_table
142   006D                 __balloc_table:             defs CLIB_BALLOC_TABLE_SIZE * 2
143   006D              
144   006D              ENDIF
145   006D              
242   006D                  INCLUDE "crt/classic/crt_cpm_fcntl.asm"
1     006D              ; CP/M style FCB support (CP/M + MSXDOS1)
2     006D              
3     006D              
4     006D              
5     006D              
6     006D              
7     006D                  SECTION bss_crt
8     006D              
9     006D              IF CLIB_OPEN_MAX > 0
10    006D                  SECTION bss_crt
11    006D                  PUBLIC  __fcb
12    006D              __fcb:
13    006D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      008D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00AD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00CD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00ED  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      010D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      012D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      014D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      016D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      018D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01AD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01CD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      01ED  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      020D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      022D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      024D  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                            defs    CLIB_OPEN_MAX * 166	; Each FCB is 43 bytes long
14    025F              ENDIF
15    025F              
16    025F                  PUBLIC  defltdsk
17    025F  00          defltdsk:       defb    0	;Default disc
18    0260              
243   0260              
244   0260                  SECTION code_crt_init
245   0025  0E 19           ld      c,25
246   0027  CD 05 00        call    5
247   002A  32 5F 02        ld      (defltdsk),a
248   002D              
249   002D              
250   002D              
